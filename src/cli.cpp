#include <unistd.h>
#include "exception.h"
#include "cli.h"

static void help()
{
	static const char helpstr[] =
	    "Syntax: qmx-contest [options]\n"
	    "\n"
	    "Options:\n"
	    "  -a <device>: specify ALSA device (default is to autodetect)\n"
	    "  -c <device>: specify CAT device (default is to autodetect)\n"
	    "  -f <file>: specify Cabrillo file to append QSOs to\n"
	    "  -h: this help screen\n"
	    "  -q: disable QSK mode when keying\n"
	    "  -s <callsign>: specify callsign (for presets and logging)\n"
	    "  -t <text>: send specified text and exit (non-interactive mode)\n"
	    "  -w <wpm>: specify initial WPM (default is %u)\n"
	    "  -x <exchange>: specify fixed contest exchange\n"
	    "  -X <exchange>: specify initial incremental contest exchange\n"
	    "\n"
	    "If exchange is not specified, default is to start with 1 and increment \n"
	    "it in every QSO logged.\n"
	    "\n"
	    "If Cabrillo file is specified, then header and footer has to be added to it \n"
	    "manually (Cabrillo file generated by this tool contains only QSOs and \n"
	    "isn't suited for being submitted before editing it manually).\n";

	printf(helpstr, DEFAULT_WPM);
}

Cli::Cli(int ac, char *const av[])
{
	int opt;
	while((opt = getopt(ac, av, ":a:c:f:hs:t:w:qx:X:")) != -1 && !exitFlag) {
		switch(opt) {
			case '?':
				xthrow("-%c: option not recognized", optopt);

			case ':':
				xthrow("-%c: option requires argument", optopt);

			case 'a':
				alsaDev = optarg;
				break;

			case 'c':
				catDev = optarg;
				break;

			case 'f':
				cbrFile = optarg;
				break;

			case 'h':
				help();
				exitFlag = true;
				break;

			case 's':
				callsign = optarg;
				break;

			case 't':
				textToSend = optarg;
				break;

			case 'w':
				initialWPM = strtol(optarg, NULL, 10);
				xassert(initialWPM > 0 && initialWPM < 100, "Invalid initial WPM specified");
				break;

			case 'q':
				qsk = false;
				break;

			// TODO: 'x' and 'X' are mutually exclusive, do something if both are present
			case 'x':
				exchange      = optarg;
				exchangeFixed = true;
				break;

			case 'X':
				exchange      = optarg;
				exchangeFixed = false;
				break;

			default:
				xthrow("Unknown error value from getopt(): %d", opt);
		}
	}
}
