#include <unistd.h>
#include "exception.h"
#include "cli.h"

static void help()
{
	static const char helpstr[] =
	    "Syntax: qmx-contest [options]\n"
	    "\n"
	    "Options:\n"
	    "  -a <device>: specify ALSA device (default is to autodetect)\n"
	    "  -c <device>: specify CAT device (default is to autodetect)\n"
	    "  -d: enable dummy mode -- run without QMX (mostly for testing)\n"
	    "  -f <file>: specify Cabrillo file to append QSOs to\n"
	    "  -h: this help screen\n"
	    "  -q: disable QSK mode when keying\n"
	    "  -s <callsign>: specify callsign (for presets and logging)\n"
	    "  -t <text>: send specified text and exit (non-interactive mode)\n"
	    "  -w <wpm>: specify initial WPM (default is %u)\n"
	    "  -P <prefix>: specify contest exchange prefix\n"
	    "  -I <infix>: specify contest exchange infix (default: 001)\n"
	    "  -S <suffix>: specify contest exchange suffix\n"
	    "\n"
	    "Exchange prefix and suffix is the fixed part of contest exchange. They can be \n"
	    "omitted if only numbers are exchanged.\n"
	    "\n"
	    "Exchange infix is the variable, numeric part of the exchange, incremented \n"
	    "in every logged QSO. Set it to an empty string (-I '') to use only fixed \n"
	    "exchanges (in that case specify the exchange as either -P or -S). If it's set \n"
	    "and not empty, it has to be numeric, optionally starting with zero or zeroes \n"
	    "to specify its length.\n"
	    "\n"
	    "If Cabrillo file is specified, then header and footer has to be added to it \n"
	    "manually (Cabrillo file generated by this tool contains only QSOs and \n"
	    "isn't suited for being submitted before editing it manually).\n";

	printf(helpstr, DEFAULT_WPM);
}

Cli::Cli(int ac, char *const av[])
{
	int opt;
	while((opt = getopt(ac, av, ":a:c:df:hs:t:w:qP:I:S:")) != -1 && !exitFlag) {
		switch(opt) {
			case '?':
				xthrow("-%c: option not recognized", optopt);

			case ':':
				xthrow("-%c: option requires argument", optopt);

			case 'a':
				alsaDev = optarg;
				break;

			case 'c':
				catDev = optarg;
				break;

			case 'd':
				dummyFlag = true;
				break;

			case 'f':
				cbrFile = optarg;
				break;

			case 'h':
				help();
				exitFlag = true;
				break;

			case 's':
				callsign = optarg;
				break;

			case 't':
				textToSend = optarg;
				break;

			case 'w':
				initialWPM = strtol(optarg, NULL, 10);
				xassert(initialWPM > 0 && initialWPM < 100, "Invalid initial WPM specified");
				break;

			case 'q':
				qsk = false;
				break;

			case 'P':
				exchangePrefix = optarg;
				break;

			case 'I':
				exchangeInfix = optarg;
				break;

			case 'S':
				exchangeSuffix = optarg;
				break;

			default:
				xthrow("Unknown error value from getopt(): %d", opt);
		}
	}
}
